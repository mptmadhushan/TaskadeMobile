{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { CodedError, Platform } from 'expo-modules-core';\nimport { KeepAwakeEventState } from \"./KeepAwake.types\";\nvar wakeLockMap = {};\nexport default {\n  isAvailableAsync: function () {\n    var _isAvailableAsync = _asyncToGenerator(function* () {\n      if (Platform.isDOMAvailable) {\n        return 'wakeLock' in navigator;\n      }\n      return false;\n    });\n    function isAvailableAsync() {\n      return _isAvailableAsync.apply(this, arguments);\n    }\n    return isAvailableAsync;\n  }(),\n  activate: function () {\n    var _activate = _asyncToGenerator(function* (tag) {\n      if (!Platform.isDOMAvailable) {\n        return;\n      }\n      var wakeLock = yield navigator.wakeLock.request('screen');\n      wakeLockMap[tag] = wakeLock;\n    });\n    function activate(_x) {\n      return _activate.apply(this, arguments);\n    }\n    return activate;\n  }(),\n  deactivate: function () {\n    var _deactivate = _asyncToGenerator(function* (tag) {\n      if (!Platform.isDOMAvailable) {\n        return;\n      }\n      if (wakeLockMap[tag]) {\n        var _wakeLockMap$tag$rele, _wakeLockMap$tag;\n        (_wakeLockMap$tag$rele = (_wakeLockMap$tag = wakeLockMap[tag]).release) == null ? void 0 : _wakeLockMap$tag$rele.call(_wakeLockMap$tag);\n        delete wakeLockMap[tag];\n      } else {\n        throw new CodedError('ERR_KEEP_AWAKE_TAG_INVALID', \"The wake lock with tag \" + tag + \" has not activated yet\");\n      }\n    });\n    function deactivate(_x2) {\n      return _deactivate.apply(this, arguments);\n    }\n    return deactivate;\n  }(),\n  addListenerForTag: function addListenerForTag(tag, listener) {\n    var eventListener = function eventListener() {\n      listener({\n        state: KeepAwakeEventState.RELEASE\n      });\n    };\n    var sentinel = wakeLockMap[tag];\n    if (sentinel) {\n      if ('addEventListener' in sentinel) {\n        sentinel.addEventListener == null ? void 0 : sentinel.addEventListener('release', eventListener);\n      } else {\n        sentinel.onrelease = eventListener;\n      }\n    }\n    return {\n      remove: function remove() {\n        var sentinel = wakeLockMap[tag];\n        if (sentinel) {\n          if (sentinel.removeEventListener) {\n            sentinel.removeEventListener('release', eventListener);\n          } else {\n            sentinel.onrelease = null;\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"sources":["../src/ExpoKeepAwake.web.ts"],"names":[],"mappings":";AAAA,SAAS,UAAU,EAAE,QAAQ,QAAsB,mBAAmB;AAEtE,SAAS,mBAAmB;AAE5B,IAAM,WAAW,GAAqC,CAAA,CAAE;AAmBxD,eAAe;EACP,gBAAgB;IAAA,uDAAA;MACpB,IAAI,QAAQ,CAAC,cAAc,EAAE;QAC3B,OAAO,UAAU,IAAI,SAAS;MAC/B;MACD,OAAO,KAAK;IACd,CAAC;IAAA;MAAA;IAAA;IAAA;EAAA;EACK,QAAQ;IAAA,6CAAC,GAAW,EAAA;MACxB,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE;QAC5B;MACD;MACD,IAAM,QAAQ,SAAS,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC;MAC3D,WAAW,CAAC,GAAG,CAAC,GAAG,QAAQ;IAC7B,CAAC;IAAA;MAAA;IAAA;IAAA;EAAA;EACK,UAAU;IAAA,+CAAC,GAAW,EAAA;MAC1B,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE;QAC5B;MACD;MACD,IAAI,WAAW,CAAC,GAAG,CAAC,EAAE;QAAA;QACpB,6CAAA,WAAW,CAAC,GAAG,CAAC,EAAC,OAAO,qBAAxB,4CAA4B;QAC5B,OAAO,WAAW,CAAC,GAAG,CAAC;OACxB,MAAM;QACL,MAAM,IAAI,UAAU,CAClB,4BAA4B,8BACF,GAAG,4BAC9B;MACF;IACH,CAAC;IAAA;MAAA;IAAA;IAAA;EAAA;EACD,iBAAiB,6BAAC,GAAW,EAAE,QAA2B,EAAA;IACxD,IAAM,aAAa,GAAG,SAAhB,aAAa,GAAQ;MACzB,QAAQ,CAAC;QAAE,KAAK,EAAE,mBAAmB,CAAC;MAAO,CAAE,CAAC;IAClD,CAAC;IACD,IAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC;IACjC,IAAI,QAAQ,EAAE;MACZ,IAAI,kBAAkB,IAAI,QAAQ,EAAE;QAClC,QAAQ,CAAC,gBAAgB,oBAAzB,QAAQ,CAAC,gBAAgB,CAAG,SAAS,EAAE,aAAa,CAAC;OACtD,MAAM;QACL,QAAQ,CAAC,SAAS,GAAG,aAAa;MACnC;IACF;IACD,OAAO;MACL,MAAM,EAAE,kBAAK;QACX,IAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC;QACjC,IAAI,QAAQ,EAAE;UACZ,IAAI,QAAQ,CAAC,mBAAmB,EAAE;YAChC,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,aAAa,CAAC;WACvD,MAAM;YACL,QAAQ,CAAC,SAAS,GAAG,IAAI;UAC1B;QACF;MACH;KACD;EACH;CACD","sourcesContent":["import { CodedError, Platform, Subscription } from 'expo-modules-core';\n\nimport { KeepAwakeEventState, KeepAwakeListener } from './KeepAwake.types';\n\nconst wakeLockMap: Record<string, WakeLockSentinel> = {};\n\ntype WakeLockSentinel = {\n  onrelease: null | ((event: any) => void);\n  released: boolean;\n  type: 'screen';\n  release?: Function;\n\n  addEventListener?: (event: string, listener: (event: any) => void) => void;\n  removeEventListener?: (event: string, listener: (event: any) => void) => void;\n};\n\ndeclare const navigator: {\n  wakeLock: {\n    request(type: 'screen'): Promise<WakeLockSentinel>;\n  };\n};\n\n/** Wraps the webWakeLock API https://developer.mozilla.org/en-US/docs/Web/API/Screen_Wake_Lock_API */\nexport default {\n  async isAvailableAsync() {\n    if (Platform.isDOMAvailable) {\n      return 'wakeLock' in navigator;\n    }\n    return false;\n  },\n  async activate(tag: string) {\n    if (!Platform.isDOMAvailable) {\n      return;\n    }\n    const wakeLock = await navigator.wakeLock.request('screen');\n    wakeLockMap[tag] = wakeLock;\n  },\n  async deactivate(tag: string) {\n    if (!Platform.isDOMAvailable) {\n      return;\n    }\n    if (wakeLockMap[tag]) {\n      wakeLockMap[tag].release?.();\n      delete wakeLockMap[tag];\n    } else {\n      throw new CodedError(\n        'ERR_KEEP_AWAKE_TAG_INVALID',\n        `The wake lock with tag ${tag} has not activated yet`\n      );\n    }\n  },\n  addListenerForTag(tag: string, listener: KeepAwakeListener): Subscription {\n    const eventListener = () => {\n      listener({ state: KeepAwakeEventState.RELEASE });\n    };\n    const sentinel = wakeLockMap[tag];\n    if (sentinel) {\n      if ('addEventListener' in sentinel) {\n        sentinel.addEventListener?.('release', eventListener);\n      } else {\n        sentinel.onrelease = eventListener;\n      }\n    }\n    return {\n      remove: () => {\n        const sentinel = wakeLockMap[tag];\n        if (sentinel) {\n          if (sentinel.removeEventListener) {\n            sentinel.removeEventListener('release', eventListener);\n          } else {\n            sentinel.onrelease = null;\n          }\n        }\n      },\n    };\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}