{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport AsyncStorage from '@react-native-community/async-storage';\nvar URI = 'http://localhost:4000';\nvar httpLink = createHttpLink({\n  uri: URI\n});\nvar authLink = setContext(function () {\n  var _ref2 = _asyncToGenerator(function* (_, _ref) {\n    var headers = _ref.headers;\n    var token = yield AsyncStorage.getItem('token');\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: token || ''\n      })\n    };\n  });\n  return function (_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nexport var client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});","map":{"version":3,"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","AsyncStorage","URI","httpLink","uri","authLink","_","headers","token","getItem","authorization","client","link","concat","cache"],"sources":["/Users/Tharindu/Downloads/myProjects/full-stack/teamTaskApp/TaskadeMobile/apollo.tsx"],"sourcesContent":["import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport AsyncStorage from '@react-native-community/async-storage';\n\nconst URI = 'http://localhost:4000';\n// const URI = 'http://172.20.10.2:4000';\n\nconst httpLink = createHttpLink({\n  uri: URI,\n});\n\nconst authLink = setContext(async (_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = await AsyncStorage.getItem('token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token || '',\n    }\n  }\n});\n\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n"],"mappings":";;;;AAAA,SAASA,YAAY,EAAEC,aAAa,EAAEC,cAAc,QAAQ,gBAAgB;AAC5E,SAASC,UAAU,QAAQ,6BAA6B;AACxD,OAAOC,YAAY,MAAM,uCAAuC;AAEhE,IAAMC,GAAG,GAAG,uBAAuB;AAGnC,IAAMC,QAAQ,GAAGJ,cAAc,CAAC;EAC9BK,GAAG,EAAEF;AACP,CAAC,CAAC;AAEF,IAAMG,QAAQ,GAAGL,UAAU;EAAA,8BAAC,WAAOM,CAAC,QAAkB;IAAA,IAAdC,OAAO,QAAPA,OAAO;IAE7C,IAAMC,KAAK,SAASP,YAAY,CAACQ,OAAO,CAAC,OAAO,CAAC;IAEjD,OAAO;MACLF,OAAO,kCACFA,OAAO;QACVG,aAAa,EAAEF,KAAK,IAAI;MAAE;IAE9B,CAAC;EACH,CAAC;EAAA;IAAA;EAAA;AAAA,IAAC;AAEF,OAAO,IAAMG,MAAM,GAAG,IAAId,YAAY,CAAC;EACrCe,IAAI,EAAEP,QAAQ,CAACQ,MAAM,CAACV,QAAQ,CAAC;EAC/BW,KAAK,EAAE,IAAIhB,aAAa;AAC1B,CAAC,CAAC"},"metadata":{},"sourceType":"module"}