{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _templateObject;\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ProjectItem from \"../components/ProjectItem\";\nimport { Text, View } from \"../components/Themed\";\nimport { useQuery, gql } from '@apollo/client';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MY_PROJECTS = gql(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\nquery myTaskLists {\\n  myTaskLists {\\n    id\\n    title\\n    createdAt\\n  }\\n}\\n\"])));\nexport default function ProjectsScreen() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    project = _useState2[0],\n    setProjects = _useState2[1];\n  var _useQuery = useQuery(MY_PROJECTS),\n    data = _useQuery.data,\n    error = _useQuery.error,\n    loading = _useQuery.loading;\n  useEffect(function () {\n    if (error) {\n      Alert.alert('Error fetching projects', error.message);\n    }\n  }, [error]);\n  useEffect(function () {\n    if (data) {\n      setProjects(data.myTaskLists);\n    }\n  }, [data]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"hello\"\n    }), _jsx(FlatList, {\n      data: project,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(ProjectItem, {\n          project: item\n        });\n      },\n      style: {\n        width: '100%'\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  root: {\n    flexDirection: 'row',\n    width: '100%',\n    padding: 10\n  },\n  iconContainer: {\n    width: 40,\n    height: 40,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 5,\n    backgroundColor: '#404040',\n    marginRight: 10\n  },\n  title: {\n    fontSize: 20,\n    marginRight: 5\n  },\n  time: {\n    color: 'darkgrey'\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","ProjectItem","Text","View","useQuery","gql","MY_PROJECTS","ProjectsScreen","project","setProjects","data","error","loading","Alert","alert","message","myTaskLists","styles","container","item","width","StyleSheet","create","flex","alignItems","justifyContent","root","flexDirection","padding","iconContainer","height","borderRadius","backgroundColor","marginRight","title","fontSize","time","color"],"sources":["/Users/Tharindu/Downloads/myProjects/full-stack/teamTaskApp/TaskadeMobile/screens/ProjectsScreen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StyleSheet, FlatList, Alert } from 'react-native';\nimport ProjectItem from '../components/ProjectItem';\nimport { Text, View } from '../components/Themed';\nimport { useQuery, gql } from '@apollo/client';\n\nconst MY_PROJECTS = gql`\nquery myTaskLists {\n  myTaskLists {\n    id\n    title\n    createdAt\n  }\n}\n`\n\nexport default function ProjectsScreen() {\n  const [project, setProjects] = useState([]);\n\n  const { data, error, loading } = useQuery(MY_PROJECTS)\n\n  useEffect(() => {\n    if (error) {\n      Alert.alert('Error fetching projects', error.message);\n    }\n  }, [error]);\n\n  useEffect(() => {\n    if (data) {\n      setProjects(data.myTaskLists);\n    }\n  }, [data]);\n\n  return (\n    <View style={styles.container}>\n      <Text>hello</Text>\n      <FlatList\n        data={project}\n        renderItem={({item}) => <ProjectItem project={item} />}\n        style={{ width: '100%' }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  root: {\n    flexDirection: 'row',\n    width: '100%',\n    padding: 10,\n  },\n  iconContainer: {\n    width: 40,\n    height: 40,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 5,\n    backgroundColor: '#404040',\n    marginRight: 10,\n  },\n  title: {\n    fontSize: 20,\n    marginRight: 5,\n  },\n  time: {\n    color: 'darkgrey'\n  }\n});\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAAA;AAAA;AAEnD,OAAOC,WAAW;AAClB,SAASC,IAAI,EAAEC,IAAI;AACnB,SAASC,QAAQ,EAAEC,GAAG,QAAQ,gBAAgB;AAAC;AAAA;AAE/C,IAAMC,WAAW,GAAGD,GAAG,4JAQtB;AAED,eAAe,SAASE,cAAc,GAAG;EAAA,gBACRR,QAAQ,CAAC,EAAE,CAAC;IAAA;IAApCS,OAAO;IAAEC,WAAW;EAAA,gBAEML,QAAQ,CAACE,WAAW,CAAC;IAA9CI,IAAI,aAAJA,IAAI;IAAEC,KAAK,aAALA,KAAK;IAAEC,OAAO,aAAPA,OAAO;EAE5BZ,SAAS,CAAC,YAAM;IACd,IAAIW,KAAK,EAAE;MACTE,KAAK,CAACC,KAAK,CAAC,yBAAyB,EAAEH,KAAK,CAACI,OAAO,CAAC;IACvD;EACF,CAAC,EAAE,CAACJ,KAAK,CAAC,CAAC;EAEXX,SAAS,CAAC,YAAM;IACd,IAAIU,IAAI,EAAE;MACRD,WAAW,CAACC,IAAI,CAACM,WAAW,CAAC;IAC/B;EACF,CAAC,EAAE,CAACN,IAAI,CAAC,CAAC;EAEV,OACE,MAAC,IAAI;IAAC,KAAK,EAAEO,MAAM,CAACC,SAAU;IAAA,WAC5B,KAAC,IAAI;MAAA,UAAC;IAAK,EAAO,EAClB,KAAC,QAAQ;MACP,IAAI,EAAEV,OAAQ;MACd,UAAU,EAAE;QAAA,IAAEW,IAAI,QAAJA,IAAI;QAAA,OAAM,KAAC,WAAW;UAAC,OAAO,EAAEA;QAAK,EAAG;MAAA,CAAC;MACvD,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAO;IAAE,EACzB;EAAA,EACG;AAEX;AAEA,IAAMH,MAAM,GAAGI,UAAU,CAACC,MAAM,CAAC;EAC/BJ,SAAS,EAAE;IACTK,IAAI,EAAE,CAAC;IACPC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EAClB,CAAC;EACDC,IAAI,EAAE;IACJC,aAAa,EAAE,KAAK;IACpBP,KAAK,EAAE,MAAM;IACbQ,OAAO,EAAE;EACX,CAAC;EACDC,aAAa,EAAE;IACbT,KAAK,EAAE,EAAE;IACTU,MAAM,EAAE,EAAE;IACVL,cAAc,EAAE,QAAQ;IACxBD,UAAU,EAAE,QAAQ;IACpBO,YAAY,EAAE,CAAC;IACfC,eAAe,EAAE,SAAS;IAC1BC,WAAW,EAAE;EACf,CAAC;EACDC,KAAK,EAAE;IACLC,QAAQ,EAAE,EAAE;IACZF,WAAW,EAAE;EACf,CAAC;EACDG,IAAI,EAAE;IACJC,KAAK,EAAE;EACT;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}