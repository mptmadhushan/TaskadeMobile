{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _templateObject;\nimport React, { useState, useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useMutation, gql } from '@apollo/client';\nimport Checkbox from \"../Checkbox\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar UPDATE_TODO = gql(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\nmutation updateToDo($id:ID!, $content: String, $isCompleted: Boolean) {\\n  updateToDo(id: $id, content: $content, isCompleted: $isCompleted) {\\n    id\\n\\t\\tcontent\\n    isCompleted\\n    \\n    taskList {\\n      title\\n      progress\\n      todos {\\n        id\\n        content\\n        isCompleted\\n      }\\n    }\\n  }\\n}\\n\"])));\nvar ToDoItem = function ToDoItem(_ref) {\n  var todo = _ref.todo,\n    onSubmit = _ref.onSubmit;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isChecked = _useState2[0],\n    setIsChecked = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    content = _useState4[0],\n    setContent = _useState4[1];\n  var _useMutation = useMutation(UPDATE_TODO),\n    _useMutation2 = _slicedToArray(_useMutation, 1),\n    updateItem = _useMutation2[0];\n  var input = useRef(null);\n  var callUpdateItem = function callUpdateItem() {\n    updateItem({\n      variables: {\n        id: todo.id,\n        content: content,\n        isCompleted: isChecked\n      }\n    });\n  };\n  useEffect(function () {\n    if (!todo) {\n      return;\n    }\n    setIsChecked(todo.isCompleted);\n    setContent(todo.content);\n  }, [todo]);\n  useEffect(function () {\n    if (input.current) {\n      var _input$current;\n      input == null ? void 0 : (_input$current = input.current) == null ? void 0 : _input$current.focus();\n    }\n  }, [input]);\n  var onKeyPress = function onKeyPress(_ref2) {\n    var nativeEvent = _ref2.nativeEvent;\n    if (nativeEvent.key === 'Backspace' && content === '') {\n      console.warn('Delete item');\n    }\n  };\n  return _jsxs(View, {\n    style: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginVertical: 3\n    },\n    children: [_jsx(Checkbox, {\n      isChecked: isChecked,\n      onPress: function onPress() {\n        setIsChecked(!isChecked);\n        callUpdateItem();\n      }\n    }), _jsx(TextInput, {\n      ref: input,\n      value: content,\n      onChangeText: setContent,\n      style: {\n        flex: 1,\n        fontSize: 18,\n        color: 'black',\n        marginLeft: 12\n      },\n      multiline: true,\n      onEndEditing: callUpdateItem,\n      onSubmitEditing: onSubmit,\n      blurOnSubmit: true,\n      onKeyPress: onKeyPress\n    })]\n  });\n};\nexport default ToDoItem;","map":{"version":3,"names":["React","useState","useEffect","useRef","useMutation","gql","Checkbox","UPDATE_TODO","ToDoItem","todo","onSubmit","isChecked","setIsChecked","content","setContent","updateItem","input","callUpdateItem","variables","id","isCompleted","current","focus","onKeyPress","nativeEvent","key","console","warn","flexDirection","alignItems","marginVertical","flex","fontSize","color","marginLeft"],"sources":["/Users/Tharindu/Downloads/myProjects/full-stack/teamTaskApp/TaskadeMobile/components/ToDoItem/index.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { View, TextInput } from 'react-native'\nimport { useMutation, gql } from '@apollo/client';\n\nimport Checkbox from '../Checkbox';\n\nconst UPDATE_TODO = gql`\nmutation updateToDo($id:ID!, $content: String, $isCompleted: Boolean) {\n  updateToDo(id: $id, content: $content, isCompleted: $isCompleted) {\n    id\n\t\tcontent\n    isCompleted\n    \n    taskList {\n      title\n      progress\n      todos {\n        id\n        content\n        isCompleted\n      }\n    }\n  }\n}\n`;\n\ninterface ToDoItemProps {\n  todo: {\n    id: string;\n    content: string;\n    isCompleted: boolean;\n  },\n  onSubmit: () => void\n}\n\nconst ToDoItem = ({ todo, onSubmit }: ToDoItemProps) => {\n  const [isChecked, setIsChecked] = useState(false);\n  const [content, setContent] = useState('');\n\n  const [updateItem] = useMutation(UPDATE_TODO);\n  const input = useRef(null);\n\n\n  const callUpdateItem = () => {\n    updateItem({\n      variables: {\n        id: todo.id,\n        content,\n        isCompleted: isChecked,\n      }\n    })\n  };\n\n\n  useEffect(() => {\n    if (!todo) { return }\n\n    setIsChecked(todo.isCompleted);\n    setContent(todo.content); \n  }, [todo])\n\n  useEffect(() => {\n    if (input.current) {\n      input?.current?.focus();\n    }\n  }, [input])\n\n  const onKeyPress = ({ nativeEvent }) => {\n    if (nativeEvent.key === 'Backspace' && content === '') {\n      // Delete item\n      console.warn('Delete item');\n    }\n  }\n\n  return (\n    <View style={{ flexDirection: 'row', alignItems: 'center', marginVertical: 3 }}>\n        {/* Checkbox */}\n        <Checkbox \n          isChecked={isChecked}\n          onPress={() => { \n            setIsChecked(!isChecked);\n            callUpdateItem();\n          }}\n        />\n\n        {/* Text Input */}\n        <TextInput\n          ref={input}\n          value={content}\n          onChangeText={setContent}\n          style={{\n            flex: 1,\n            fontSize: 18,\n            color: 'black',\n            marginLeft: 12,\n          }}\n          multiline\n          onEndEditing={callUpdateItem}\n          onSubmitEditing={onSubmit}\n          blurOnSubmit\n          onKeyPress={onKeyPress}\n        />\n      </View>\n  )\n}\n\nexport default ToDoItem\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAA;AAAA;AAE1D,SAASC,WAAW,EAAEC,GAAG,QAAQ,gBAAgB;AAEjD,OAAOC,QAAQ;AAAoB;AAAA;AAEnC,IAAMC,WAAW,GAAGF,GAAG,8YAkBtB;AAWD,IAAMG,QAAQ,GAAG,SAAXA,QAAQ,OAA0C;EAAA,IAApCC,IAAI,QAAJA,IAAI;IAAEC,QAAQ,QAARA,QAAQ;EAAA,gBACET,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA1CU,SAAS;IAAEC,YAAY;EAAA,iBACAX,QAAQ,CAAC,EAAE,CAAC;IAAA;IAAnCY,OAAO;IAAEC,UAAU;EAAA,mBAELV,WAAW,CAACG,WAAW,CAAC;IAAA;IAAtCQ,UAAU;EACjB,IAAMC,KAAK,GAAGb,MAAM,CAAC,IAAI,CAAC;EAG1B,IAAMc,cAAc,GAAG,SAAjBA,cAAc,GAAS;IAC3BF,UAAU,CAAC;MACTG,SAAS,EAAE;QACTC,EAAE,EAAEV,IAAI,CAACU,EAAE;QACXN,OAAO,EAAPA,OAAO;QACPO,WAAW,EAAET;MACf;IACF,CAAC,CAAC;EACJ,CAAC;EAGDT,SAAS,CAAC,YAAM;IACd,IAAI,CAACO,IAAI,EAAE;MAAE;IAAO;IAEpBG,YAAY,CAACH,IAAI,CAACW,WAAW,CAAC;IAC9BN,UAAU,CAACL,IAAI,CAACI,OAAO,CAAC;EAC1B,CAAC,EAAE,CAACJ,IAAI,CAAC,CAAC;EAEVP,SAAS,CAAC,YAAM;IACd,IAAIc,KAAK,CAACK,OAAO,EAAE;MAAA;MACjBL,KAAK,sCAALA,KAAK,CAAEK,OAAO,qBAAd,eAAgBC,KAAK,EAAE;IACzB;EACF,CAAC,EAAE,CAACN,KAAK,CAAC,CAAC;EAEX,IAAMO,UAAU,GAAG,SAAbA,UAAU,QAAwB;IAAA,IAAlBC,WAAW,SAAXA,WAAW;IAC/B,IAAIA,WAAW,CAACC,GAAG,KAAK,WAAW,IAAIZ,OAAO,KAAK,EAAE,EAAE;MAErDa,OAAO,CAACC,IAAI,CAAC,aAAa,CAAC;IAC7B;EACF,CAAC;EAED,OACE,MAAC,IAAI;IAAC,KAAK,EAAE;MAAEC,aAAa,EAAE,KAAK;MAAEC,UAAU,EAAE,QAAQ;MAAEC,cAAc,EAAE;IAAE,CAAE;IAAA,WAE3E,KAAC,QAAQ;MACP,SAAS,EAAEnB,SAAU;MACrB,OAAO,EAAE,mBAAM;QACbC,YAAY,CAAC,CAACD,SAAS,CAAC;QACxBM,cAAc,EAAE;MAClB;IAAE,EACF,EAGF,KAAC,SAAS;MACR,GAAG,EAAED,KAAM;MACX,KAAK,EAAEH,OAAQ;MACf,YAAY,EAAEC,UAAW;MACzB,KAAK,EAAE;QACLiB,IAAI,EAAE,CAAC;QACPC,QAAQ,EAAE,EAAE;QACZC,KAAK,EAAE,OAAO;QACdC,UAAU,EAAE;MACd,CAAE;MACF,SAAS;MACT,YAAY,EAAEjB,cAAe;MAC7B,eAAe,EAAEP,QAAS;MAC1B,YAAY;MACZ,UAAU,EAAEa;IAAW,EACvB;EAAA,EACG;AAEb,CAAC;AAED,eAAef,QAAQ"},"metadata":{},"sourceType":"module"}